
%%
clc;
clear;
grid on
figure(1) % Hold figure 1
hold on
box on
xlabel (' Length (m)') % X-label of the output plot
ylabel (' Width (m)') % Y-label of the output plot
title (' Simulator') % Title of the plot

%% Making Network
n = 40; 
R = 11;
% %R is communication range 
% 
% Ph?m vi c?a t?a ?? x (ví d? t? -10 ??n 10)
xmin = 0;
xmax = 30;

ymin = 0;
ymax = 30;

% T?o m?ng ch?a các t?a ?? x ng?u nhiên
x = randi([xmin, xmax], 1, n);
y = randi([ymin, ymax], 1, n);

16 node
% x = [2,3,4,11,12,12,17,22,18,28,31,22,37,41,46,51];
% y = [20,23,18,21,27,18,17,28,25,23,30,17,26,34,26,30];
% 
% x = [2,3,4,11,12,12,17,18,18,24,27,22,25,22,25,30];
% y = [20,23,18,21,27,18,17,28,23,23,27,17,26,22,18,22]; 

%30 node
% x = [25,22,27,10,20,30,14,18,12,9,8,23,30,5,24,6,30,24,13,22,15,25,11,0,18,28,6,13,23,21];
% y = [0,29,23,17,5,15,16,20,26,29,21,12,28,14,7,12,21,17,23,30,29,16,29,3,1,9,17,16,27,16];

% x = [16,9,23,5,21,5,11,19,24,2,28,24,15,13,13,9,15,15,25,24,19,11,25,16,10,29,27,17,19,18];
% y = [6,9,14,7,26,6,7,5,7,13,9,28,13,5,28,30,13,3,8,12,18,8,18,22,6,3,9,9,13,15];


%40 node

%50 node

matrix = zeros(n,n);

adj_matrix = zeros(n,n);

node(1,n) = Nodes();
s = [];
t = [];
node(1).E_intial = 100;
node(23).E_intial = 100;

for i = 1 : n
    for j = 1 : n
        distance = sqrt((x(i) - x(j))^2 + (y(i) - y(j))^2);
        matrix(i,j) = distance;
         if (i == j)
            adj_matrix(i,j) = 0;
         elseif (i~=j && distance < R) 
            adj_matrix(i,j) = 1;
         else
             adj_matrix(i,j) = inf;
         end       
     end
end

count =2;
for i = 1 : n
   for j = count : n
    if(adj_matrix(i,j) == 1)
       s = [s, i];
       t = [t, j];
    end
   end
       count = count + 1;
end

%check_neighbor
neighbor = [];
ID = [];
for i = 1:n
    %Node Id 
    ID = [ID,i];
    node(i).ID = i;
    node(i).x = x(i);
    node(i).y = y(i);
    %Threshhold distance
    node(i).d0 = sqrt(node(i).Efs/node(i).Emp);
    for j = 1:n
    %Node neighbor;
     if(adj_matrix(i,j) == 1)
        neighbor = [neighbor, j];
        node(i).neighbor = neighbor;
     end
    end
    neighbor = [];
end

    %% Edge weight 
%distance
d = [];
linkQuality = [];
for i = 1 : n
         neighbor = node(i).neighbor;
         for j = 1 : n
             if (ismember(j,neighbor))
                 d = [d, matrix(i,j)];
                 node(i).d = d;
             end
         end
         d = [];
end

% Link quality
    
%     for i = 1 : n
%         node(i).update_LinkQuality;
%         array_index = find(i == s);
%         m = t(array_index);
%         for j = 1 : length(m);
%             if(ismember(m(j),node(i).neighbor))
%                 index = find(m(j) == node(i).neighbor);
%                 linkQuality = [linkQuality, node(i).link(index)];
%             end 
%         end
%     end
%    
    

%% Phan cap cac node
for i = 1:n
   if(i == 1)
      node(i).hirechical = i;
      node(i).child = i + 1;
   end
   
end

%% Simulation
time_start = 1;
time_end = 500;
sensor_node = [23,18,14];

high_energy_threshold = 1.8;
medium_energy_threshold = 0.8;
node_critical = [];


%     for i = time_start:time_end  
%      hirechical(node,n);
%     node_critical = detect_criticalNode(node,n,medium_energy_threshold);
    Re_routing(node_critical,n,node);

      MST_global = Re_Prim(node_critical,1,30,node);
%     if(~isempty(node_critical) || i == 1 || i == 10 ||i == 20 || i == 30)
%              MST_global = Re_Prim(node_critical,1,30,node,n);
%     end

         plot_figure(s, t, x, y, MST_global, linkQuality,high_energy_threshold,medium_energy_threshold,node);
         Check_parent(MST_global,node);
         Energy(x,y,node);
%             for j = 1:length(sensor_node)
%                     Packet_transmission(sensor_node(j),node);
%                     plot_path(s,t,x,y,sensor_node(j),high_energy_threshold,medium_energy_threshold,node);
%                     Energy(x,y,node);
%                     pause(1);
%             end
%            disp(i); 
%                     plot_figure(s, t, x, y, MST_global, linkQuality,high_energy_threshold,medium_energy_threshold,node);
%     end


            
     
   




